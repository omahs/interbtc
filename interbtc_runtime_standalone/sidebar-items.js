initSidebarItems({"constant":[["BITCOIN_BLOCK_SPACING",""],["BITCOIN_SPACING_MS",""],["CENTS",""],["DAYS",""],["DOLLARS",""],["DOT",""],["HOURS",""],["IBTC",""],["INTR",""],["KBTC",""],["KINT",""],["KSM",""],["MAXIMUM_BLOCK_WEIGHT","We allow for 2 seconds of compute with a 6 second average block time."],["MILLICENTS",""],["MILLISECS_PER_BLOCK",""],["MINUTES",""],["SLOT_DURATION",""],["TARGET_SPACING","Target Spacing: 10 minutes (600 seconds)"],["UNITS",""],["VERSION","This runtime version."],["WASM_BINARY",""],["WASM_BINARY_BLOATY",""],["WEEKS",""],["WEIGHT_PER_SECOND",""],["YEARS",""]],"enum":[["BtcRelayCall","Contains one variant per dispatchable that can be called by an extrinsic."],["CurrencyId",""],["DispatchClass","A generalized group of dispatch types."],["Everything","A [`Contains`] implementation that contains every value."],["IssueEvent","The event emitted by this pallet."],["NominationEvent","The event emitted by this pallet."],["OriginCaller",""],["RedeemEvent","The event emitted by this pallet."],["ReplaceEvent","The event emitted by this pallet."],["RuntimeCall",""],["RuntimeEvent",""],["StatusCode","Enum indicating the status of the BTC Parachain."],["TimestampCall","Contains one variant per dispatchable that can be called by an extrinsic."],["TokenSymbol",""]],"fn":[["deposit",""],["get_all_module_accounts",""],["native_version","The version information used to identify this runtime when compiled natively."]],"macro":[["construct_runtime","Construct a runtime, with the given name and the given pallets."],["parameter_types","Create new implementations of the `Get` trait."]],"mod":[["api",""],["token_distribution",""]],"struct":[["AdjustmentVariable","The adjustment variable of the runtime. Higher values will cause `TargetBlockFullness` to change the fees more rapidly."],["AssetAuthority",""],["AuraAccountAdapter",""],["BalanceWrapper","a wrapper around a balance, used in RPC to workaround a bug where using u128 in runtime-apis fails. See https://github.com/paritytech/substrate/issues/4641"],["BaseCallFilter",""],["BasicDeposit",""],["BlockExecutionWeight","Time to execute an empty block. Calculated by multiplying the Average with `1` and adding `0`."],["BlockHashCount",""],["BlockNumberToBalance",""],["Burn",""],["CurrencyHooks",""],["DealWithFees",""],["DealWithRewards",""],["DustRemovalWhitelist",""],["EmissionPeriod",""],["EnactmentPeriod",""],["EqualPrivilegeOnly","Implementation of [`PrivilegeCmp`] that only checks for equal origins."],["EscrowAnnuityAccount",""],["EscrowAnnuityPalletId",""],["EscrowBlockRewardProvider",""],["ExistentialDeposits",""],["ExtrinsicBaseWeight","Time to execute a NO-OP extrinsic, for example `System::remark`. Calculated by multiplying the Average with `1` and adding `0`."],["FastTrackVotingPeriod",""],["FeeAccount",""],["FeePalletId",""],["FieldDeposit",""],["FixedU128","A fixed point number representation in the range. Fixed Point 128 bits unsigned, range = [0.000000000000000000, 340282366920938463463.374607431768211455]"],["GenesisConfig",""],["GetDepositBase",""],["GetDepositFactor",""],["GetMaxSignatories",""],["GetNativeCurrencyId",""],["GetRelayChainCurrencyId",""],["GetWrappedCurrencyId",""],["IdentityFee","Implementor of `WeightToFee` that maps one unit of weight to one unit of fee."],["InflationPeriod",""],["IssueRequest",""],["LaunchPeriod",""],["LoansPalletId",""],["MaxAdditionalFields",""],["MaxApprovals",""],["MaxAuthorities",""],["MaxExpectedValue",""],["MaxLocks",""],["MaxPeriod",""],["MaxProposals",""],["MaxRegistrars",""],["MaxScheduledPerBlock",""],["MaxSpend",""],["MaxSubAccounts",""],["MaxVestingSchedules",""],["MaxVotes",""],["MaximumMultiplier",""],["MaximumSchedulerWeight",""],["MinVestedTransfer",""],["MinimumDeposit",""],["MinimumMultiplier","Minimum amount of the multiplier. This value cannot be too low. A test case should ensure that combined with `AdjustmentVariable`, we can recover from the minimum. See `multiplier_can_grow_from_zero`."],["MinimumPeriod",""],["OperationalFeeMultiplier","This value increases the priority of `Operational` transactions by adding a “virtual tip” that’s equal to the `OperationalFeeMultiplier * final_fee`."],["PalletInfo","Provides an implementation of `PalletInfo` to provide information about the pallet setup in the runtime."],["ParachainBlocksPerBitcoinBlock",""],["Perbill","A fixed point representation of a number in the range [0, 1]."],["Permill","A fixed point representation of a number in the range [0, 1]."],["PreimageBaseDepositz",""],["PreimageByteDeposit",""],["PreimageByteDepositz",""],["ProposalBond",""],["ProposalBondMaximum",""],["ProposalBondMinimum",""],["RedeemRequest",""],["ReplaceRequest",""],["RocksDbWeight","By default, Substrate uses RocksDB, so this will be the weight used throughout the runtime."],["Runtime",""],["RuntimeApi",""],["RuntimeApiImpl","Implements all runtime apis for the client side."],["RuntimeBlockLength",""],["RuntimeBlockWeights",""],["RuntimeOrigin","The runtime origin type representing the origin of a call."],["SS58Prefix",""],["SessionKeys",""],["Span",""],["SpendPeriod",""],["SubAccountDeposit",""],["SupplyAccount",""],["SupplyPalletId",""],["TargetBlockFullness","The portion of the `NORMAL_DISPATCH_RATIO` that we adjust the fees with. Blocks filled less than this will decrease the weight and more will increase."],["TechnicalCommitteeMaxMembers",""],["TechnicalCommitteeMaxProposals",""],["TechnicalCommitteeMotionDuration",""],["TotalWrapped",""],["TransactionByteFee",""],["TreasuryAccount",""],["TreasuryPalletId",""],["UncleGenerations",""],["VaultAnnuityAccount",""],["VaultAnnuityPalletId",""],["VaultBlockRewardProvider",""],["VaultRegistryAccount",""],["VaultRegistryPalletId",""],["Version",""],["VotingPeriod",""],["Weight",""]],"trait":[["BuildStorage","Complex storage builder stuff."],["CurrencyInfo",""],["FindAuthor","A trait for finding the author of a block header based on the `PreRuntime` digests contained within it."],["Get","A trait for querying a single value from a type."],["KeyOwnerProofSystem","Something which can compute and check proofs of a historical key owner and return full identification data of that key owner."],["StorageValue","A trait for working with macro-generated storage values under the substrate storage API."]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["Address","The address format for describing accounts."],["AllPallets","All pallets included in the runtime as a nested tuple of types."],["AllPalletsReversedWithSystemFirst","All pallets included in the runtime as a nested tuple of types in reversed order. With the system pallet first."],["AllPalletsWithSystem","All pallets included in the runtime as a nested tuple of types."],["AllPalletsWithSystemReversed","All pallets included in the runtime as a nested tuple of types in reversed order."],["AllPalletsWithoutSystem","All pallets included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllPalletsWithoutSystemReversed","All pallets included in the runtime as a nested tuple of types in reversed order. Excludes the System pallet."],["AssetRegistry",""],["AssetRegistryConfig",""],["Aura",""],["AuraConfig",""],["AuraId","An Aura authority identifier using S/R 25519 as its crypto."],["Authorship",""],["BTCRelay",""],["BTCRelayConfig",""],["Balance","Balance of an account."],["Block","Block type as expected by this runtime."],["BlockId","BlockId type as expected by this runtime."],["BlockNumber","An index to a block."],["CheckedExtrinsic","Extrinsic type that has already been checked."],["ClientsInfo",""],["Currency",""],["Democracy",""],["DemocracyConfig",""],["Escrow",""],["EscrowAnnuity",""],["EscrowAnnuityInstance",""],["EscrowRewards",""],["EscrowRewardsInstance",""],["Executive","Executive: handles dispatch to the various modules."],["Fee",""],["FeeConfig",""],["Grandpa",""],["GrandpaAuthorityList","A list of Grandpa authorities with associated weights."],["GrandpaConfig",""],["GrandpaId","Identity of a Grandpa authority."],["Hash","A hash of some data used by the chain."],["Header","Block header type as expected by this runtime."],["Identity",""],["Issue",""],["IssueConfig",""],["Liquidity",""],["Loans",""],["LoansConfig",""],["LockIdentifier","An identifier for a lock. Used for disambiguating different locks so that they can be individually replaced or removed."],["Moment","An instant or duration in time."],["Multisig",""],["Nomination",""],["NominationConfig",""],["Nonce","Index of a transaction in the chain. 32-bit should be plenty."],["Oracle",""],["OracleConfig",""],["Preimage",""],["PriceDetail",""],["Rate",""],["Ratio",""],["Redeem",""],["RedeemConfig",""],["Replace",""],["ReplaceConfig",""],["Scheduler",""],["Security",""],["SecurityConfig",""],["Shortfall",""],["Signature","Alias to 512-bit hash when used in the context of a transaction signature on the chain."],["SignedBlock","A Block signed with a Justification"],["SignedExtra","The SignedExtension to the basic transaction logic."],["SignedFixedPoint","The signed fixed point type."],["SignedInner","The `Inner` type of the `SignedFixedPoint`."],["SlowAdjustingFeeUpdate",""],["Sudo",""],["SudoConfig",""],["Supply",""],["SupplyConfig",""],["System",""],["SystemConfig",""],["TechnicalCommittee",""],["TechnicalCommitteeConfig",""],["TechnicalCommitteeInstance",""],["TechnicalMembership",""],["TechnicalMembershipConfig",""],["Timestamp",""],["Tokens",""],["TokensConfig",""],["TransactionPayment",""],["Treasury",""],["TreasuryConfig",""],["UncheckedExtrinsic","Unchecked extrinsic type as expected by this runtime."],["UnsignedFixedPoint","The unsigned fixed point type."],["UnsignedInner","The `Inner` type of the `UnsignedFixedPoint`."],["Utility",""],["VaultAnnuity",""],["VaultAnnuityInstance",""],["VaultRegistry",""],["VaultRegistryConfig",""],["VaultRewards",""],["VaultRewardsInstance",""],["VaultStaking",""],["Vesting",""],["VestingConfig",""]]});